{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.31.0",
    "schemaVersion": 1009,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@jackdbd/hapi-logger-plugin!",
  "docComment": "",
  "name": "@jackdbd/hapi-logger-plugin",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@jackdbd/hapi-logger-plugin!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@jackdbd/hapi-logger-plugin!_default:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default: "
            },
            {
              "kind": "Content",
              "text": "{\n    multiple: boolean;\n    name: string;\n    once: boolean;\n    pkg: any;\n    register: (server: import(\"@hapi/hapi\")."
            },
            {
              "kind": "Reference",
              "text": "Server",
              "canonicalReference": "@types/hapi__hapi!Server:class"
            },
            {
              "kind": "Content",
              "text": ", options?: import(\"./schemas.js\")."
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "@jackdbd/hapi-logger-plugin!Options:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    requirements: {\n        hapi: string;\n    };\n    version: any;\n}"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "_default",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@jackdbd/hapi-logger-plugin!Options:interface",
          "docComment": "/**\n * Options for this Hapi plugin.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Options "
            }
          ],
          "releaseTag": "Public",
          "name": "Options",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@jackdbd/hapi-logger-plugin!Options#channels:member",
              "docComment": "/**\n * The event channels you want to log.\n *\n * @defaultValue\n *\n * `['app']`\n *\n * @see\n *\n * [Hapi 'log' Event](https://hapi.dev/api/?v=21.0.0-beta.1#-log-event)\n *\n * @see\n *\n * [Hapi 'request' Event](https://hapi.dev/api/?v=21.0.0-beta.1#-request-event)\n *\n * @see\n *\n * [podium](https://hapi.dev/module/podium/)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "channels?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "channels",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@jackdbd/hapi-logger-plugin!Options#namespace:member",
              "docComment": "/**\n * The namespace for the debug logger (unstructured logging). This option has no effect when using structured logging.\n *\n * @defaultValue\n *\n * `undefined`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "namespace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@jackdbd/hapi-logger-plugin!Options#should_use_emoji_for_severity:member",
              "docComment": "/**\n * Whether to use an emoji for the severity level (unstructured logging). This option has no effect when using structured logging.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "should_use_emoji_for_severity?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "should_use_emoji_for_severity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@jackdbd/hapi-logger-plugin!Options#should_validate_log_statements:member",
              "docComment": "/**\n * Whether each log statement should be validated against a Joi schema.\n *\n * @defaultValue\n *\n * `false` when `NODE_ENV` is `'production'`, `true` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "should_validate_log_statements?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "should_validate_log_statements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
